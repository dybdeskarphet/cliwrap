#!/usr/bin/env bash
#!/usr/bin/env zsh

# This file is protected under the MIT License.
# Please see the LICENSE and the README file for more information.

# Set colors for terminal output
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RESET='\033[0m'

# Function to detect the history file based on the flag
detect_history_file() {
    if [[ "$1" == "-zsh" ]]; then
        if [[ -f "$HOME/.zsh_history" ]]; then
            echo "$HOME/.zsh_history"
        else
            echo "Error: Zsh history file not found at $HOME/.zsh_history" >&2
            exit 1
        fi
    elif [[ "$1" == "-bash" ]]; then
        if [[ -f "$HOME/.bash_history" ]]; then
            echo "$HOME/.bash_history"
        else
            echo "Error: Bash history file not found at $HOME/.bash_history" >&2
            exit 1
        fi
    elif [[ "$1" == "-csh" ]] || [[ "$1" == "-tcsh" ]]; then
        if [[ -f "$HOME/.history" ]]; then
            echo "$HOME/.history"
        else
            echo "Error: Csh/Tcsh history file not found at $HOME/.history" >&2
            exit 1
        fi
    else
        if [[ -f "$HOME/.zsh_history" ]]; then
            echo "$HOME/.zsh_history"
        elif [[ -f "$HOME/.bash_history" ]]; then
            echo "$HOME/.bash_history"
        elif [[ -f "$HOME/.history" ]]; then
            echo "$HOME/.history"
        else
            echo "Error: No history file found" >&2
            exit 1
        fi
    fi
}

# Function to clean the history file for processing
preprocess_history() {
    local file="$1"
    if [ -f "$file" ]; then
        cat "$file" | LC_ALL=C tr -cd '\11\12\15\40-\176' # Allow printable ASCII characters only
    else
        echo "Error: No history file found" >&2
        exit 1
    fi
}

# Parse history and count occurrences
parse_history() {
    local history_data="$1"
    echo "$history_data" | awk '{print $1}' | grep -v '^$' | sort | uniq -c | sort -rn | head -10
}

parse_full_commands() {
    local history_data="$1"
    echo "$history_data" | grep -E '^\s*\S+\s+\S+' | sort | uniq -c | sort -rn | head -10
}

# Display the cool title :P
display_title() {
    echo -e "${CYAN}"
    cat << "EOF"
   _____ _      _____                        
  / ____| |    |_   _|                       
 | |    | |      | |_      ___ __ __ _ _ __  
 | |    | |      | \ \ /\ / / '__/ _` | '_ \ 
 | |____| |____ _| |\ V  V /| | | (_| | |_) |
  \_____|______|_____\_/\_/ |_|  \__,_| .__/ 
                                      | |    
                                      |_|    

EOF
}

# Display top tools and commands
display_table() {
    local title="$1"
    local data="$2"

    echo -e "\n${MAGENTA}${title}${RESET}"
    echo -e "${YELLOW}---------------------------------${RESET}"
    echo -e "${CYAN}Usage Count | Command${RESET}"
    echo -e "${YELLOW}---------------------------------${RESET}"
    echo -e "$data"
    echo -e "${YELLOW}---------------------------------${RESET}\n"
}

# Display help message
display_help() {
    echo -e "${CYAN}Usage: cliwrap [options]${RESET}"
    echo -e "${YELLOW}Options:${RESET}"
    echo -e "${GREEN}  -zsh${RESET}    Force Zsh history file"
    echo -e "${GREEN}  -bash${RESET}   Force Bash history file"
    echo -e "${GREEN}  -csh${RESET}    Force Csh history file"
    echo -e "${GREEN}  -tcsh${RESET}   Force Tcsh history file"
    echo -e "${GREEN}  -h${RESET}      Display this help message"
    echo -e "${YELLOW}Description:${RESET}"
    echo -e "Use Bash, Zsh, Csh or Tcsh history file to create \"Spotify Wrapped-like\" statistics for your terminal usage."
    echo -e "${YELLOW}Donations:${RESET}"
    echo -e "You can support me over Github! @islemci"
}

# Main logic
main() {
    if [[ "$1" == "-h" ]]; then
        display_help
        exit 0
    fi

    local history_file
    history_file=$(detect_history_file "$1")

    display_title

    echo -e "${GREEN}Parsing history file: $history_file${RESET}\n"

    # Preprocess history file to remove problematic characters
    local history_data
    history_data=$(preprocess_history "$history_file")

    # Top tools
    local top_tools
    top_tools=$(parse_history "$history_data")
    display_table "Top Tools" "$top_tools"

    # Top full commands
    local top_commands
    top_commands=$(parse_full_commands "$history_data")
    display_table "Top Full Commands" "$top_commands"

    # Total commands
    local total_commands
    total_commands=$(echo "$history_data" | wc -l)
    echo -e "${GREEN}Total Commands Executed: ${total_commands}${RESET}"
}

main "$@"

#Â Made by musti <3 @islemci on Github.
